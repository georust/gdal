use std::fmt::{Display, Formatter};

use crate::cpl::CslStringList;
use crate::raster::processing::dem::{DemCommonOptions, DemCommonOptionsOwner};

/// Configuration options for [`super::DemProcessing::terrain_ruggedness_index`].
#[derive(Debug, Clone, Default)]
pub struct TriOptions {
    common_options: DemCommonOptions,
    algorithm: Option<DemTriAlg>,
}

impl TriOptions {
    /// Create a aspect-from-DEM processor
    pub fn new() -> Self {
        Default::default()
    }

    /// Specify the slope computation algorithm.
    pub fn with_algorithm(&mut self, algorithm: DemTriAlg) -> &mut Self {
        self.algorithm = Some(algorithm);
        self
    }

    /// Render relevant common options into [`CslStringList`] values, as compatible with
    /// [`gdal_sys::GDALDEMProcessing`].
    pub fn to_options_list(&self) -> CslStringList {
        #[allow(unused_mut)]
        let mut opts = self.common_options.to_options_list();

        // Before 3.3, Wilson is the only algorithm and therefore there's no
        // selection option. Rust caller can still specify Wilson, but
        // we don't pass it along.
        #[cfg(all(major_is_3, minor_ge_3))]
        if let Some(alg) = self.algorithm {
            opts.add_string("-alg").unwrap();
            opts.add_string(&alg.to_string()).unwrap();
        }

        opts
    }
}

/// Exposes common DEM routine options to [`TriOptions`]
impl DemCommonOptionsOwner for TriOptions {
    fn opts(&self) -> &DemCommonOptions {
        &self.common_options
    }

    fn opts_mut(&mut self) -> &mut DemCommonOptions {
        &mut self.common_options
    }
}

/// Algorithm for computing Terrain Ruggedness Index (TRI).
#[derive(Debug, Clone, Copy)]
pub enum DemTriAlg {
    /// The Wilson (see Wilson et al 2007, Marine Geodesy 30:3-35) algorithm uses the mean
    /// difference between a central pixel and its surrounding cells.
    /// This is recommended for bathymetric use cases.
    Wilson,
    #[cfg(all(major_is_3, minor_ge_3))]
    /// The Riley algorithm (see Riley, S.J., De Gloria, S.D., Elliot, R. (1999):
    /// A Terrain Ruggedness that Quantifies Topographic Heterogeneity.
    /// Intermountain Journal of Science, Vol.5, No.1-4, pp.23-27) uses the square root of the
    /// sum of the square of the difference between a central pixel and its surrounding cells.
    /// This is recommended for terrestrial use cases.
    ///
    /// Only available in GDAL >= 3.3
    Riley,
}

impl Display for DemTriAlg {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        f.write_fmt(format_args!("{self:?}"))
    }
}

#[cfg(test)]
mod tests {
    use crate::assert_near;
    use crate::errors::Result;
    use crate::raster::processing::dem::DemProcessing;
    use crate::raster::StatisticsAll;
    use crate::test_utils::{fixture, target};
    use crate::Dataset;

    use super::*;

    #[cfg(all(major_is_3, minor_ge_3))]
    #[test]
    fn options() -> Result<()> {
        use crate::cpl::CslStringList;
        let mut opts = TriOptions::new();
        opts.with_input_band(2.try_into().unwrap())
            .with_compute_edges(true)
            .with_algorithm(DemTriAlg::Wilson)
            .with_output_format("GTiff")
            .with_additional_options("CPL_DEBUG=ON".parse()?);

        let expected: CslStringList =
            "-compute_edges -b 2 -of GTiff CPL_DEBUG=ON -alg Wilson".parse()?;
        assert_eq!(expected.to_string(), opts.to_options_list().to_string());

        Ok(())
    }

    #[test]
    fn tri() -> Result<()> {
        let mut opts = TriOptions::new();
        opts.with_algorithm(DemTriAlg::Wilson);

        let ds = Dataset::open(fixture("dem-hills.tiff"))?;

        let tri = ds.terrain_ruggedness_index(target("dem-hills-tri.tiff"), &opts)?;

        let stats = tri.rasterband(1)?.get_statistics(true, false)?.unwrap();

        // These numbers were generated by extracting the output from:
        //    gdaldem tri -alg Wilson fixtures/dem-hills.tiff target/dest.tiff
        //    gdalinfo -stats target/dest.tiff
        let expected = StatisticsAll {
            min: 0.0,
            max: 4.9836235046387,
            mean: 0.49063101456532,
            std_dev: 0.67193563366948,
        };

        assert_near!(StatisticsAll, stats, expected, epsilon = 1e-10);
        Ok(())
    }
}
