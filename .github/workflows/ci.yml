name: CI

on:
  push:
    branches: [master, trying, staging]
  pull_request:
    branches: [master, trying, staging]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  gdal_35:
    name: "ci gdal-35"
    runs-on: ubuntu-latest
    container:
      image: osgeo/gdal:ubuntu-full-3.5.0

    strategy:
      matrix:
        features: ["", "--features bindgen,array"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install build deps
        run: |
          apt-get update -y
          apt-get install build-essential pkg-config libclang-dev -y
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose
  gdal_34:
    name: "ci gdal-34"
    runs-on: ubuntu-latest
    container:
      image: osgeo/gdal:ubuntu-full-3.4.0

    strategy:
      matrix:
        features: ["", "--features bindgen,array"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install build deps
        run: |
          apt-get update -y
          apt-get install build-essential pkg-config libclang-dev -y
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose

  gdal_33:
    name: "ci gdal-33"
    runs-on: ubuntu-latest
    container:
      image: osgeo/gdal:ubuntu-full-3.3.0

    strategy:
      matrix:
        features: ["", "--features bindgen,array"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install build deps
        run: |
          apt-get update -y
          apt-get install build-essential pkg-config libclang-dev -y
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose

  gdal_32:
    name: "ci gdal-32"
    runs-on: ubuntu-latest
    container:
      image: osgeo/gdal:ubuntu-full-3.2.0

    strategy:
      matrix:
        features: ["", "--features bindgen,array"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install build deps
        run: |
          apt-get update -y
          apt-get install build-essential pkg-config libclang-dev -y
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose

  ubuntu_lts:
    name: "ci ubuntu-lts"
    runs-on: "ubuntu-20.04"

    strategy:
      matrix:
        features: ["", "--features bindgen,array"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install GDAL
        run: |
          sudo apt-get update
          sudo apt-get install libgdal-dev gdal-bin build-essential
          export C_INCLUDE_PATH=/usr/include/gdal:$C_INCLUDE_PATH
          export CPLUS_INCLUDE_PATH=/usr/include/gdal:$CPLUS_INCLUDE_PATH
          sudo ldconfig
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose
